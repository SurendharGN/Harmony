Objective:
    Creating an e-commerce app for an Indian thrift shop.

1. CREATING AN EXPRESS SERVER
- start by initializing the node package manager to create a node application.
- npm init 
- package name: EXPRESS
- install the dependencies: "express"
- create a started file named "app.js" and import the express framework

Tip 1: use nodemon for automatically restarting the nodejs server.
- syntax:   npm i nodemon -g
            npx nodemon starterFileName


2. SENDING HTML & CSS FILES
2.1. HTML
    - res.sendFile(path.join(__dirname,'text.html'))
2.2. CSS
    - app.use(express.static(path.join(__dirname,’CSS’)))

3. Routing in express js
    Express router are a way to organize the express application.
    Routers are like mini versions of express applications. they provide funtionality for handling route matching, requests and responses.

    syntax: 
    const variableExpress = require("express")
    const variableRouter = variableExpress.Router()
    module.exports = variableRouter

    handling the router in app.js:
        - start by importing the router file
        - the router can act as a middleware
        - syntax: app.use(routerName)


4. Parsing incoming requests

    const bodyParser = require('body-parser');

    app.use(bodyParser.urlencoded({extended: false}));

5. Rendering a templating engine
    syntax: 
        app.render()
TIP 2: a middleware is a function that has the access to the applications request-response cycle.

SQL and NoSQL

SQL
 - Data usees schemas
 - Data's are related
 - Data is  distributed across multiple tables
 - Vertical scaling is possible
 - Limitations on reaad and write queries 

NoSQL
 - Schema-less
 - Data's are not related
 - Data is typically merged/nested in collections
 - Both horizontal and vertical scaling is possible
 - Great for mass read and write requests.

 RESOURCES AND GUIDES
 1. The process of building a mern application:
 link: 

FIREBASE AUTHENTICATION:
1. npm i firebase 
2. create a firebase.js file in the src folder
3. copy the boilerplate code from the firebase application of the project.
4. import {getAuth} from "firebase/auth";
5. initialize the func and export it.
6. have an auth component and import it there.
7. import { createUserWithEmailAndPassword } from "firebase/auth": for the standard one

GOOGLE FIREBASE
1. import { GoogleAuthProvider } from "firebase/auth";
2. const provider = new GoogleAuthProvider();
3. import signupWithPopup(auth,provider)

GETTING THE VALUE FROM THE INPUT
useState: e=>e.target.value -> the "target" proerty returns the element where the event occured